class DSU{
    int n;
    int[] parent;
    int components;

    public DSU(int n){
        this.n = n;
        parent = new int[n];
        for(int i = 0; i < n; ++i){
            parent[i] = i;
        }
        components = n;
    }

    public int find_set(int v) {
        if (v == parent[v])
        {
            return v;
        }

        parent[v] = find_set(parent[v]);
        return parent[v];
    }

    public boolean union_sets(int a, int b) {     //a -> parent, b -> child
        int x = find_set(a);
        int y = find_set(b);

        if (x == y || y != b) return false;     //cycle detected

        parent[y] = x;
        components--;

        return true;
    }

    public int get_components(){
        return components;
    }
}