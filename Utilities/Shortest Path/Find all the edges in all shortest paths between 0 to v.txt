Find all the edges in all shortest paths between 0 to v


class Solution {
    public boolean[] findAnswer(int n, int[][] edges) {
        List<List<Node>> g = new ArrayList<>();
        
        for(int i = 0; i < n; ++i)
        {
            g.add(new ArrayList<>());
        }
        
        
        for(int i[] : edges)
        {
            int u = i[0];
            int v = i[1];
            int d = i[2];
            
            g.get(u).add(new Node(v, d));
            g.get(v).add(new Node(u, d));
        }
        
        PriorityQueue<Node> pq = new PriorityQueue<>((a, b) -> a.u - b.u == 0 ? a.d - b.d : a.u - b.u);
        int[] dist = new int[n];
        Arrays.fill(dist, Integer.MAX_VALUE);
 
        pq.add(new Node(0, 0));
        dist[0] = 0;
        
        
        int prev = -1;
        boolean[] visited = new boolean[n];
		
        while (!pq.isEmpty()) {
            int u = pq.poll().d;
			
            if(visited[u]) continue;
            visited[u] = true;
            
            
            for (Node v : g.get(u)) 
            {
                if (dist[v.u] > dist[u] + v.d ) {	
                    dist[v.u] = dist[u] + v.d;
                    pq.add(new Node(dist[v.u], v.u));
                }
            }
        }
        
        
        boolean[] ans = new boolean[edges.length];
        int maxd = dist[n-1];
        visited = new boolean[n];
        HashSet<String> set = new HashSet<>();
        
        boolean res = dfs(0, 0, maxd, g, visited, set);
        
        
        int j = 0;
        for(int i[] : edges)
        {
            int u = i[0];
            int v = i[1];
            int d = i[2];
            
            StringBuilder sb = new StringBuilder();
            sb.append(Math.min(u, v));
            sb.append(",");
            sb.append(Math.max(u, v));
            sb.append(",");
            sb.append(d);
            
            
            boolean left = set.contains(sb.toString());
            
            ans[j] = left;
            j++;
        }
        
        return ans;
    }
    
    boolean dfs(int root, int dist, int maxd, List<List<Node>> g, boolean[] visited, HashSet<String> set)
    {
        if(dist > maxd) return false;   // removing this will result in TLE        
        if(dist == maxd && root == g.size() - 1) return true;
        
        visited[root] = true;
        
        boolean res = false;
        for(Node node : g.get(root))
        {
            if(visited[node.u]) continue;
            
            // if there is any edge from root->node.u in the shortest path
            boolean tres = dfs(node.u, dist + node.d, maxd, g, visited, set);
            
            // add it to the set
            if(tres == true)
            {
                StringBuilder sb = new StringBuilder();
                sb.append(Math.min(root, node.u));
                sb.append(",");
                sb.append(Math.max(root, node.u));
                sb.append(",");
                sb.append(node.d);
                
                set.add(sb.toString());
            }
            res |= tres;
        }
        
        visited[root] = false;
        
        return res;
    }
}

class Node
{
    int u, d;
    public Node(int u, int d)
    {
        this.u = u;
        this.d = d;
    }
    
    
    public String toString()
    {
        return u + " : " + d;
    }
}

