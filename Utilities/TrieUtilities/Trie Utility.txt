class Node
{
    Node[] child;
    boolean end;
    Node()
    {
        child = new Node[26];
        end = false;
    }
}

class Trie 
{
    Node root;
    public Trie()
    {
        root = new Node();
    }
    
    public void insert(String word)
    {
        Node t = root;
        for(int i = 0; i < word.length(); ++i)
        {
            int index = word.charAt(i) - 'a';
            if(t.child[index] == null)
            {
                t.child[index] = new Node();
            }
            t = t.child[index];
        }
        t.end = true;
    }
    
    public boolean search(String word)
    {
        Node t = root;
        for(int i = 0; i < word.length(); ++i)
        {
            int index = word.charAt(i) - 'a';
            if(t.child[index] == null)
            {
                return false;
            }
            t = t.child[index];
        }
        return t.end;
    }
    
    public boolean startsWith(String prefix)
    {
        Node t = root;
        for(int i = 0; i < prefix.length(); ++i)
        {
            int index = prefix.charAt(i) - 'a';
            if(t.child[index] == null)
            {
                return false;
            }
            t = t.child[index];
        }
        return true;
    }
}